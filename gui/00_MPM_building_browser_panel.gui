# The spreadsheet cells are a fixed size in order to be optimized
@spreadsheet_width = 1381
@spreadsheet_width_minus_10 = 1371
@spreadsheet_header_height = 80
@spreadsheet_height = 54

# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530


@all_filter_selected_alpha = 0.35

types building_browser_panel_types {
	type building_browser_building_item = flowcontainer {
		tooltipwidget = {
			FancyTooltip_Building = {}
		}

		block "first_info" {
			button = {
				onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
				
				size = { 170 @spreadsheet_height }

				icon = {
					texture = "[Building.GetIcon]"
					size = { 50 50 }
					parentanchor = vcenter
				}

				textbox = {
					datacontext = "[Building.GetState]"
									
					position = { 50 0 }
					parentanchor = vcenter
					size = { 120 @spreadsheet_height }
					margin = { 5 0 }
					
					align = nobaseline
					elide = right
					fontsize_min = 12
					multiline = yes

					text = "STATE_NAME_WITH_FOREIGN_FLAG_NO_FORMAT"
				}
			}

			vertical_divider = {}

			widget = {
				size = { 120 @spreadsheet_height }

				flowcontainer = {
					visible = "[Not(IsDataModelEmpty(Building.AccessState.AccessStateRegion.AccessTraits))]"
					datamodel = "[DataModelFirst(Building.AccessState.AccessStateRegion.AccessTraits, '(int32)3')]"
					parentanchor = vcenter
					margin_left = 5

					item = {
						icon = {
							size = { 35 35 }
							tooltip = TOOLTIP_STATE_TRAIT
							onmousehierarchyenter = "[AccessHighlightManager.HighlightStateTrait(StateTrait.Self)]"
							onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
							alwaystransparent = no
							texture = "[StateTrait.GetTexture]"
						}
					}
				}
			}


			vertical_divider = {}

			building_browser_item_ownership_area = {}
		}


		vertical_divider = {}

		### DOWNSIZE / EXPAND
		widget = {
			size = { 120 @spreadsheet_height }

			building_level_controls = {
				parentanchor = center

				blockoverride "controller_size" {
					size = { 110 35 }
				}

				blockoverride "building_size_small_ownership_chart" {
					#hide the ownership chart as we have it in a larger version already
				}
			}
		}

		vertical_divider = {}

		widget = {
			size = { 220 @spreadsheet_height }
			# condensed_building_information_pms = { # MPM
				# parentanchor = center

				# blockoverride "trade_center_extra_info_position" {
					# position = { 110 0 }
				# }

				# blockoverride "trade_center_extra_info_size" {
					# size = { 60 23 }
				# }
			# }
            
            MPM_pms_area_building = {
                parentanchor = hcenter
                position = { 0 -5 }
                
                blockoverride scrollarea_size {
                    size = { 200 55 }
                }
                blockoverride scrollbar_size {
                    size = { 8 4 }
                }
                blockoverride track_size {
                    size = { 8 2 }
                }
                blockoverride slider_size {
                    framesize = { 40 4 }
                }
                blockoverride pm_size {
                    size = { 50 50 }
                }
                blockoverride pm_icon_size {
                    size = { 40 40 }
                }
            }
		}

		vertical_divider = {}

		# EMPLOYMENT
		widget = {
			size = { 130 @spreadsheet_height }

			widget = {
				size = { 110 30 }
				parentanchor = center

				default_progressbar_horizontal = {
					tooltip = "TOOLTIP_BUILDING_EMPLOYMENT"
					size = { 100% 100% }
					parentanchor = vcenter

					blockoverride "values" {
						value = "[FixedPointToFloat(Building.GetEmploymentPercentage)]"
						min = 0
						max = 1
					}
				}

				flowcontainer = {
					parentanchor = vcenter
					textbox = {
						text = "[Building.GetNoOfEmployed|1*v]"
						margin_left = 10
						margin_bottom = 5
						margin_top = 5
						align = hcenter|nobaseline
						autoresize = yes
						parentanchor = vcenter
						widgetanchor = vcenter
					}

					textbox = {
						visible = no
						#visible = "[LessThan_int64(Building.GetNoOfEmployed, Building.GetEmployeeCap)]"
						raw_text = "/ #maximum [Building.GetEmployeeCap|1*]#!"
						margin_left = 7
						align = hcenter|nobaseline
						autoresize = yes
						parentanchor = vcenter
						widgetanchor = vcenter
					}
				}

				employment_indicator_icon = {
					blockoverride "indicator_icon_size" {
						size = { 25 25 }
					}
					parentanchor = right|vcenter
					position = { -2 0 }
				}
			}
		}

		vertical_divider = {}

		# CASH RESERVES
		widget = {
			size = { 130 @spreadsheet_height }

			widget = {
				alpha = "[TransparentIfFalse(Building.IsActive)]"
				visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"
				size = { 110 30 }
				parentanchor = center
				using = cash_reserves_tooltip_with_graph

				gold_progressbar_horizontal = {
					size = { 100% 100% }
					alpha = "[TransparentIfFalse(Building.IsActive)]"
					visible = "[And(GreaterThan_CFixedPoint(Building.GetMaxCashReserves, '(CFixedPoint)0'), Building.IsActive)]"

					blockoverride "glow_size" {
						size = { 40 100% }
					}

					parentanchor = vcenter
					blockoverride "values" {
						min = 0
						max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
						value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
					}

					progressbar_highlight = {
						visible = "[GreaterThanOrEqualTo_CFixedPoint(Building.GetCurrentCashReserves, Building.GetMaxCashReserves)]"
					}
				}

				changed_value_decreased_progressbar_horizontal = {
					size = { 100% 100% }
					visible = "[GreaterThan_CFixedPoint(GetPrevTrendValue(Building.GetCashReservesTrend), GetTrendValue(Building.GetCashReservesTrend))]"

					blockoverride "second_progressbar" {}

					blockoverride "values" {
						min = 0
						max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
						value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
					}
					blockoverride "glow_size" {
						size = { 40 100% }
					}
					blockoverride "arrow_texture_density" {
						texture_density = 6 #use to match height of progressbar
					}
				}

				changed_value_increased_progressbar_horizontal = {
					size = { 100% 100% }
					visible = "[GreaterThan_CFixedPoint(GetTrendValue(Building.GetCashReservesTrend), GetPrevTrendValue(Building.GetCashReservesTrend))]"

					blockoverride "second_progressbar" {}

					blockoverride "values" {
						min = 0
						max = "[FixedPointToFloat(Building.GetMaxCashReserves)]"
						value = "[FixedPointToFloat(Building.GetCurrentCashReserves)]"
					}
					blockoverride "glow_size" {
						size = { 40 100% }
					}
					blockoverride "arrow_texture_density" {
						texture_density = 6 #use to match height of progressbar
					}
				}

				flowcontainer = {
					parentanchor = vcenter
					textbox = {
						raw_text = "@money![Building.GetCurrentCashReserves|Dv]"
						margin_left = 4
						align = hcenter|nobaseline
						autoresize = yes
						parentanchor = vcenter
					}

					textbox = {
						raw_text = " / #maximum [Building.GetMaxCashReserves|k]#!"
						visible = no
						#visible = "[LessThan_CFixedPoint(Building.GetCurrentCashReserves, Building.GetMaxCashReserves)]"
						align = hcenter|nobaseline
						autoresize = yes
						parentanchor = vcenter
					}
				}
			}
		}

		vertical_divider = {}

		widget = {
			size = { 90 @spreadsheet_height }

			textbox = {
				visible = "[And(Not(Building.IsGovernmentFunded), Not(Building.IsSubsistenceBuilding))]"
				using = productivity_tooltip_with_graph
				raw_text = "@money![Building.GetAverageAnnualEarningsPerEmployeeFormatted|+]"
				align = nobaseline
				autoresize = yes
				margin_left = 5
				parentanchor = vcenter
			}
		}

		vertical_divider = {}

		widget = {
			size = { 180 @spreadsheet_height }

			### ACTION BUTTONS
			flowcontainer = {
				parentanchor = vcenter
				spacing = 10
				margin = { 4 4 }

				flowcontainer = {
					### NATIONALIZE
					widget = {
						size = { 35 35 }

						building_nationalize_button = { 
							parentanchor = center  
						}
					}

					### PRIVATIZE
					widget = {
						size = { 35 35 }

						building_privatize_toggle = {
							parentanchor = center 
						}

						building_country_monopoly_icon = {
							visible = "[BuildingType.HasCountryMonopoly]"
							datacontext = "[Building.GetBuildingType]"
							size = { 35 35 }
						}
					}

					### SUBSIDIZE
					widget = {
						size = { 35 35 }

						building_subsidize_toggle = {
							parentanchor = center
						}
					}

					### AUTOEXPAND
					widget = {
						size = { 35 35 }

						building_auto_expand_toggle = {
							parentanchor = center
						}
					}
					
					widget = { size = { 5 5 }}

					button_icon_goto = {
						parentanchor = vcenter
						size = { 30 30 }
						using = tooltip_above
						tooltip = "GO_TO_DETAILS"
						visible = "[Building.IsValid]"
						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
					}
				}
			}
		}
	}

	type building_browser_building_type_item = container {
		scissor = yes
		datacontext = "[BuildingBrowserBuildingTypeItem.GetBuildingType]"

		widget = {
			size = { 100% 100% }
			parentanchor = right

			icon = {
				parentanchor = right
				size = { 1340 244 }

				texture = "[BuildingBrowserBuildingTypeItem.GetBuildingType.GetBackground]"
				alpha = 0.3
			}
		}

		flowcontainer = {
			minimumsize = { @spreadsheet_width -1 }
			direction = vertical

			background = {
				using = entry_bg_simple
			}

			container = {

				# Hidden button to toggle expand on the entire item
				button = {
					size = { 100% 100% }
					onclick = "[GetVariableSystem.Toggle(Concatenate('building_browser_building_type_', BuildingType.GetIDString))]"
				}

				flowcontainer = {
					minimumsize = { @spreadsheet_width -1 }

					tooltipwidget = {
						FancyTooltip_BuildingType = {}
					}

					widget = {
						size = { @spreadsheet_header_height @spreadsheet_header_height }

						icon = {
							parentanchor = center
							size = { 70 70 }
							texture = "[BuildingType.GetIcon]"
						}
					}

					section_header_button = {

						blockoverride "layout" {
							size = { 420 @spreadsheet_header_height }
						}

						blockoverride "fontsize" {
							using = fontsize_xxl
						}

						blockoverride "left_text" {
							raw_text = "#v [BuildingType.GetNameNoFormatting]#!"
						}

						blockoverride "onclick" {
							onclick = "[GetVariableSystem.Toggle(Concatenate('building_browser_building_type_', BuildingType.GetIDString))]"
						}

						blockoverride "onclick_showmore" {
							visible = "[Not(GetVariableSystem.Exists(Concatenate('building_browser_building_type_', BuildingType.GetIDString)))]"
						}

						blockoverride "onclick_showless" {
							visible = "[GetVariableSystem.Exists(Concatenate('building_browser_building_type_', BuildingType.GetIDString))]"
						}
					}

					vertical_divider = {}

					widget = {
						size = { 120 @spreadsheet_header_height }

						textbox = {
							text = "[BuildingBrowserBuildingTypeItem.GetTotalFilteredSizeDesc]"
							align = hcenter|nobaseline
							using = fontsize_large
							parentanchor = center
							default_format = "#v"
							autoresize = yes
							maximumsize = { 120 -1 }
							minimumsize = { 120 -1 }
							fontsize_min = 12
							elide = right
						}

						widget = {
							parentanchor = top|right
							size = { 24 24 }
							position = { -4 4 }

							### expand
							button_icon_round_map_interaction = {
								size = { 100% 100% }
								blockoverride "icon" {
									texture = "gfx/interface/buttons/button_icons/plus.dds"
								}

								onclick = "[BuildingType.ActivateExpansionLens]"
								using = select_button_sound
								visible = "[And(Or( BuildingType.IsBuildable, BuildingType.IsExpandable ), Not(BuildingType.IsMilitaryBuilding))]"
								tooltip = "EXPAND"
							}
						}
					}

					vertical_divider = {}

					widget = {
						size = { 220 @spreadsheet_header_height }
						parentanchor = vcenter
                        
                        # MPM - The entire fixedgridbox has been replaced with this thing
                        MPM_pms_area_building_type = {
                            parentanchor = center
                            
                            blockoverride scrollarea_size {
                                size = { 200 60 }
                            }
                            blockoverride scrollbar_size {
                                size = { 8 8 }
                            }
                            blockoverride track_size {
                                size = { 8 4 }
                            }
                            blockoverride slider_size {
                                framesize = { 40 8 }
                            }
                            blockoverride pm_size {
                                size = { 50 50 }
                            }
                            blockoverride pm_icon_size {
                                size = { 40 40 }
                            }
                        }
					}

					vertical_divider = {}

					textbox = {
						raw_text = "[BuildingBrowserBuildingTypeItem.GetTotalFilteredEmployed|D] / #maximum [BuildingBrowserBuildingTypeItem.GetTotalFilteredEmployeeCap|D]#!"
						size = { 130 @spreadsheet_header_height }
						align = nobaseline
						using = fontsize_large
						parentanchor = vcenter
						default_format = "#v"
						margin_left = 10
						margin_right = 10
						multiline = yes
					}

					vertical_divider = {}

					widget = {
						size = { 130 @spreadsheet_header_height }

						textbox = {
							raw_text = "[BuildingBrowserBuildingTypeItem.GetTotalFilteredCashReserves|D] / #maximum [BuildingBrowserBuildingTypeItem.GetTotalFilteredMaxCashReserves|D]#!"
							visible = "[And(NotZero_CFixedPoint(BuildingBrowserBuildingTypeItem.GetTotalFilteredCashReserves), NotZero_CFixedPoint(BuildingBrowserBuildingTypeItem.GetTotalFilteredMaxCashReserves))]"
							size = { 100% 100% }
							align = nobaseline
							using = fontsize_large
							parentanchor = vcenter
							default_format = "#v"
							margin_left = 10
							margin_right = 10
							multiline = yes
						}
					}

					vertical_divider = {}

					widget = {
						size = { 90 @spreadsheet_header_height }

						textbox = {
							visible = "[And(Not(BuildingType.IsGovernmentFunded), Not(BuildingType.IsSubsistenceBuilding))]"
							raw_text = "@money![BuildingBrowserBuildingTypeItem.GetFilteredAverageProductivity|1]"
							size = { 100 @spreadsheet_header_height }
							align = nobaseline
							using = fontsize_large
							parentanchor = vcenter
							default_format = "#v"
							margin_left = 5
						}
					}

					vertical_divider = {}

					widget = {
						size = { 150 @spreadsheet_header_height }
						parentanchor = vcenter

						flowcontainer = {
							parentanchor = vcenter
							margin = { 4 4 }

							widget = {
								size = { 35 35 }
								building_type_nationalize_button = {
									parentanchor = center
								}
							}

							### privatize
							widget = {
								size = { 35 35 }
								
								building_type_privatize_or_monopolize = {
									size = { 35 35 }
								}
							}

							### subsidize
							widget = {
								size = { 35 35 }

								building_type_subsidize_toggle = {
									parentanchor = center
								}
							}

							### Auto Expand
							widget = {
								size = { 35 35 }

								building_type_auto_expand_toggle = {
									parentanchor = center
								}
							}						
						}
					}
				}

				divider_clean = {
					visible = "[GetVariableSystem.Exists(Concatenate('building_browser_building_type_', BuildingType.GetIDString))]"
					parentanchor = bottom|hcenter
					position = { 0 -2 }
				}
			}

			fixedgridbox = {
				addrow = @spreadsheet_height
				addcolumn = @spreadsheet_width
				datamodel = "[BuildingBrowserBuildingTypeItem.GetBuildings]"
				datamodel_reuse_widgets = yes
				parentanchor = hcenter
				visible = "[GetVariableSystem.Exists(Concatenate('building_browser_building_type_', BuildingType.GetIDString))]"

				item = {
					widget = {
						size = { @spreadsheet_width @spreadsheet_height }

						building_browser_building_item = {
							blockoverride "first_info" {
								button = {
									onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Building.AccessSelf)]"
									onrightclick = "[RightClickMenuManager.ShowForBuilding(Building.AccessSelf)]"
									size = { 170 @spreadsheet_height }
									using = default_button

									hbox = {
										layoutpolicy_horizontal = expanding
										layoutpolicy_vertical = expanding
										spacing = 5
										margin = { 10 0 }

										textbox = {
											layoutpolicy_horizontal = expanding
											size = { 0 30 }
											datacontext = "[Building.GetState]"
											align = nobaseline
											elide = right
											fontsize_min = 12
											using = fontsize_large
											text = "STATE_NAME_WITH_FOREIGN_FLAG_NO_FORMAT"
										}

										### AUTO DOWNSIZE WARNING
										icon = {
											visible = "[Building.IsAutoDownsizing]"
											size = { 32 32 }
											using = tooltip_ne
											tooltip = "[Building.GetAutoDownsizeTooltip]"
											texture = "gfx/interface/production_methods/auto_downsize.dds"
										}
									}
								}
								
								vertical_divider = {}

								widget = {
									size = { 120 @spreadsheet_height }

									flowcontainer = {
										visible = "[Not(IsDataModelEmpty(Building.AccessState.AccessStateRegion.AccessTraits))]"
										datamodel = "[DataModelFirst(Building.AccessState.AccessStateRegion.AccessTraits, '(int32)3')]"
										datamodel_reuse_widgets = yes
										parentanchor = vcenter
										margin_left = 7

										item = {
											icon = {
												size = { 35 35 }
												tooltip = TOOLTIP_STATE_TRAIT
												onmousehierarchyenter = "[AccessHighlightManager.HighlightStateTrait(StateTrait.Self)]"
												onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
												alwaystransparent = no
												texture = "[StateTrait.GetTexture]"
											}
										}
									}
								}

								vertical_divider = {}

								building_browser_item_ownership_area = {}
							}
						}

						divider_clean = {
							size = { 100% 1 }
							parentanchor = bottom
							alpha = 0.15
						}
					}
				}
			}
		}
	}
}
